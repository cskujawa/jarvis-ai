version: "3.7"

volumes:
  prometheus-data: {}
  grafana-data: {}
  db-data: {}
  rasa-data: {}

services:
  app:
    image: jarvis
    container_name: jarvis-app
    restart: unless-stopped
    build:
      args:
        user: "${USER_NAME}"
        uid: "${USER_ID}"
      context: .
      dockerfile: ./interface/laravel/Dockerfile
    environment:
      SERVICE_NAME: app
    volumes:
      - ./interface/laravel:/var/www
    depends_on:
      db:
        condition: service_healthy
    networks:
      - jarvis

  db:
    image: mysql:8.0
    container_name: jarvis-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    command: --innodb_buffer_pool_size=5M --innodb_log_buffer_size=256K --max_connections=10 --key_buffer_size=8 --thread_cache_size=0 --host_cache_size=0 
    command: --innodb_ft_cache_size=1600000 --innodb_ft_total_cache_size=32000000 --thread_stack=131072 --sort_buffer_size=32K --read_buffer_size=8200
    command: --read_rnd_buffer_size=8200 --max_heap_table_size=16K --tmp_table_size=1K --bulk_insert_buffer_size=0 --join_buffer_size=128 
    command: --net_buffer_length=1K --innodb_sort_buffer_size=64K --binlog_cache_size=4K --binlog_stmt_cache_size=4K --performance_schema=off
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
    networks:
      - jarvis

  nginx:
    image: nginx
    container_name: nginx
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./system/nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
      - 8083:8083
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./interface/laravel:/var/www
      - ./system/certbot/conf:/etc/letsencrypt:rw
      - ./system/certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - jarvis
      
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./system/certbot/conf:/etc/letsencrypt:rw
      - ./system/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus/:/etc/prometheus/
    depends_on:
      - cadvisor
    networks:
      - jarvis

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - jarvis

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: always
    ports:
      - 3000:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./interface/grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./interface/grafana/config.monitoring
    depends_on:
      - prometheus
    networks:
      - jarvis

  rasa:
    image: rasa/rasa:main-spacy-en
    container_name: rasa
    user: "${USER_ID}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - 5005:5005
    volumes:
      - ./system/rasa:/app
    command:
      - run
      -  --debug
      -  --enable-api
      -  --cors
      -  "*"
    networks:
      - jarvis
    depends_on:
      postgres:
        condition: service_healthy

  rasa-action-server:
    image: rasa-action-server
    container_name: rasa-action-server
    build:
      args:
        user: "${USER_NAME}"
        uid: "${USER_ID}"
      context: .
      dockerfile: ./system/rasa/Dockerfile
    environment:
      HOMEASSISTANT_TOKEN: "${HOMEASSISTANT_TOKEN}"
    working_dir: /app
    command:
      - start
      - --debug
      - --actions
      - actions
      - --cors
      -  "*"
    ports:
      - 5055:5055
    volumes:
      - ./system/rasa/actions:/app/actions
    depends_on:
      - rasa
    networks:
      - jarvis

  huggingface:
    image: huggingface
    container_name: huggingface
    build:
      args:
        user: "${USER_NAME}"
        uid: "${USER_ID}"
      context: .
      dockerfile: ./system/huggingface/Dockerfile
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    working_dir: /app
    volumes:
      - ./system/huggingface:/app
    ports:
      - 5065:5065
    networks:
      - jarvis

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - rasa-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jarvis

  #This is a temporary solution for viewing the data rasa is storing
  pgweb:
    image: sosedoff/pgweb
    container_name: pgweb
    restart: always
    user: "${USER_ID}"
    ports: 
      - 8081:8081
    links: 
      - postgres:postgres 
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - jarvis

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    restart: always
    volumes:
      - ./system/home-assistant:/config
    ports:
      - 8123:8123
    privileged: true
    environment:
      TZ: "America/New_York"
    networks:
      - jarvis

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - jarvis
    restart: always

  wings:
    image: ghcr.io/pterodactyl/wings:v1.11.0
    container_name: wings
    env_file:
      - .env
    restart: always
    networks:
      - jarvis
      - wings0
    ports:
      - 2022:2022
    tty: true
    environment:
      TZ: "UTC"
      WINGS_UID: 988
      WINGS_GID: 988
      WINGS_USERNAME: pterodactyl
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/
      - /tmp/pterodactyl/:/tmp/pterodactyl/
      - ./system/certbot/conf/live/good-spiders.com/fullchain.pem:/etc/letsencrypt/live/wings.good-spiders.com/fullchain.pem:ro
      - ./system/certbot/conf/live/good-spiders.com/privkey.pem:/etc/letsencrypt/live/wings.good-spiders.com/privkey.pem:ro
      - ./game-servers/wings/data/wings/etc/:/etc/pterodactyl/
      - ./game-servers/wings/logs:/var/log/pterodactyl/
      - ./game-servers/wings/data:/data
      - /var/lib/pterodactyl/:/var/lib/pterodactyl/
    depends_on:
      - panel

  panel:
    image: ghcr.io/pterodactyl/panel:v1.11.2
    container_name: panel
    restart: always
    environment:
      SERVICE_NAME: panel
    env_file:
      - ./game-servers/panel/var/.env
    networks:
      - jarvis
    links:
      - db
      - redis
    volumes:
      - ./system/certbot/conf:/etc/letsencrypt
      - ./game-servers/panel/var:/app/var
      - ./game-servers/panel/logs/:/app/storage/logs
      - ./game-servers/panel/nginx/:/etc/nginx/conf.d/
    depends_on:
      db:
        condition: service_healthy

  plex:
    image: plexinc/pms-docker
    restart: unless-stopped
    container_name: plexms
    ports:
      - 32400:32400
      - 3005:3005
      - 8324:8324
      - 32469:32469
      - 1900:1900
      - 32410:32410
      - 32412:32412
      - 32413:32413
      - 32414:32414
    environment:
      - PUID=${USER_ID}
      - PGID=${USER_ID}
      - TZ=America/New_York
      - PLEX_CLAIM="${PLEX_CLAIM}"
      - ADVERTISE_IP="${PLEX_ADVERTISE_IP}"
      - HOSTNAME="PlexServer"
    volumes:
      - ./plexms/config:/config
      - ./plexms/transcodes:/transcode
      - ./plexms/media:/media

networks:
  local:
    external: false
  jarvis:
    name: jarvis
    driver: bridge
    ipam:
     config:
       - subnet: 172.30.0.1/16
         gateway: 172.30.0.1
  wings0:
    name: wings0
    driver: bridge
    ipam:
      config:
        - subnet: "172.21.0.0/16"
    driver_opts:
      com.docker.network.bridge.name: wings0
